import xml.etree.ElementTree as ET
from xml.etree.ElementTree import Element, SubElement, Comment
from ElementTree_pretty import prettify

def write_bcell_xml(diffusibles, celltypes, myreactions, myforces, mydomain, mygridsolver, mysimulator, directory):

 
 # write the files for biocellion
 xml_file = open(directory+"/run_param.xml", 'w')


 #Biocellion required parameters
 bcell_num_baseline = mysimulator['numbersteps'] #Number of steps of the simulation
 bcell_nx = mydomain['agar_heigth']+mydomain['nx'] #size in x ( Num. of grid points
 bcell_ny = mydomain['ny']
 bcell_nz = mydomain['nz'] 
 bcell_partition_size = 32 # multiple of max(4,refine_ratio^(AMR_levels - 1)*2(minimum box size))
 bcell_path = "/users/baguilar/biocellion_models/XXXX/output"   
 bcell_interval = int( mysimulator['outputPeriod'] ) # output interval
 bcell_start_x = 0  # start position from which results will be printed
 bcell_start_y = 0 
 bcell_start_z = 0   
 bcell_size_x = mydomain['nx'] + mydomain['agar_heigth'] # size of the region for printing 
 bcell_size_y = mydomain['ny'] 
 bcell_size_z = mydomain['nz']

 # Biocellion optional parameteres
 bcell_input_param = "/users/baguilar/biocellion_models/XXXX/model/cells.txt"
 bcell_verbosity = 1 # [0-5] 

 bcell_num_threads = 8
 bcell_num_node_groups = 1
 bcell_num_nodes_per_group = 8
 bcell_num_sockets_per_node = 2
 bcell_max_load_imbalance = 1.2
 
 bcell_super_x = 64
 bcell_super_y = 64 
 bcell_super_z = 64 
 
 bcell_summary = 1 
 bcell_load_balance = 1200
 bcell_regridding = 1200
 bcell_checkpoint = 1200

 bcell_refine_ratio = 2
 bcell_fill_ratio = 0.5 


 #  Write xml for Biocellion  
 top = Element('biocellion')

 comment = Comment('Input parameters for  Biocellion, generated by Python parcer ')
 top.append(comment)

 # Printing Required parameterss
 xml_required = SubElement(top, 'required'  )
 xml_required.append( Comment('Required Parameters for biocellion.') )

 xml_time_step = SubElement(xml_required, 'time_step')
 xml_time_step.set('num_baseline', str(bcell_num_baseline) )

 xml_domain = SubElement(xml_required, 'domain')
 xml_domain.set('x', str(bcell_nx) )
 xml_domain.set('y', str(bcell_ny) ) 
 xml_domain.set('z', str(bcell_nz) )

 xml_init_data = SubElement(xml_required, 'init_data')
 xml_init_data.set('partition_size', str(bcell_partition_size) )
 xml_init_data.set('src',"code") # currently no imput from binary

 xml_output  = SubElement(xml_required, 'output ')
 xml_output.set('path',bcell_path)
 xml_output.set('interval', str(bcell_interval) )
 xml_output.set('particle',"pvtu")
 xml_output.set('grid',"vtm")
 xml_output.set('start_x', str(bcell_start_x) )  
 xml_output.set('start_y', str(bcell_start_y) )
 xml_output.set('start_z', str(bcell_start_z)  )
 xml_output.set('size_x', str(bcell_size_x)   )
 xml_output.set('size_y', str(bcell_size_y)  )
 xml_output.set('size_z', str(bcell_size_z) )

 # Printing Required parameterss
 xml_optional = SubElement(top, 'optional')
 xml_optional.append( Comment('optional Parameters for biocellion.') )

 xml_bioparm_model = SubElement(xml_optional, 'model')
 xml_bioparm_model.set('param',bcell_input_param)

 xml_bioparm_stdout = SubElement(xml_optional, 'stdout')
 xml_bioparm_stdout.set('verbosity' , str(bcell_verbosity) )

 xml_bioparm_system = SubElement(xml_optional,'system')
 xml_bioparm_system.set('num_node_groups', str(bcell_num_node_groups)  )
 xml_bioparm_system.set('num_nodes_per_group', str(bcell_num_nodes_per_group)  )
 xml_bioparm_system.set('num_sockets_per_node', str(bcell_num_sockets_per_node)  )
 xml_bioparm_system.set('max_load_imbalance', str(bcell_max_load_imbalance)   )
 xml_bioparm_system.set('num_threads', str( bcell_num_threads )  )

 xml_bioparm_super_partition = SubElement(xml_optional,'super_partition')
 xml_bioparm_super_partition.set('x', str(bcell_super_x) )
 xml_bioparm_super_partition.set('y', str(bcell_super_y) )
 xml_bioparm_super_partition.set('z', str(bcell_super_z) )

 xml_interval = SubElement(xml_optional,'interval')
 xml_interval.set('summary', str(bcell_summary) )
 xml_interval.set('load_balance', str(bcell_load_balance) )
 xml_interval.set('regridding', str(bcell_regridding) )
 xml_interval.set('checkpoint', str(bcell_checkpoint) )

 xml_amr = SubElement(xml_optional,'amr')
 xml_amr.set('refine_ratio', str(bcell_refine_ratio) )
 xml_amr.set('fill_ratio' , str(bcell_fill_ratio) )


 xml_file.write( prettify(top) )
 #print prettify(top)
